{"ast":null,"code":"import { io } from 'socket.io-client';\nlet socket;\nexport const initiateSocketConnection = room => {\n  socket = io(process.env.REACT_APP_SOCKET_ENDPOINT, {\n    auth: {\n      token: 'cde'\n    }\n  });\n  console.log(`Connecting socket...`);\n};\nexport const disconnectSocket = () => {\n  console.log('Disconnecting socket...');\n  if (socket) socket.disconnect();\n};\nexport const subscribe = cb => {\n  socket.emit('my message', 'Hello there from React.');\n  if (!socket) return true;\n  socket.on('my broadcast', draw => {\n    console.log('Websocket event received!');\n    return cb(null, draw);\n  });\n};\nexport const sendData = (room, data) => {\n  if (socket) socket.emit('chat', {\n    data,\n    room\n  });\n};","map":{"version":3,"sources":["/Users/alysurr/Documents/Capstone/drawllab/client/src/components/socketio.service.js"],"names":["io","socket","initiateSocketConnection","room","process","env","REACT_APP_SOCKET_ENDPOINT","auth","token","console","log","disconnectSocket","disconnect","subscribe","cb","emit","on","draw","sendData","data"],"mappings":"AAAA,SAASA,EAAT,QAAmB,kBAAnB;AAEA,IAAIC,MAAJ;AACA,OAAO,MAAMC,wBAAwB,GAAIC,IAAD,IAAU;AAChDF,EAAAA,MAAM,GAAGD,EAAE,CAACI,OAAO,CAACC,GAAR,CAAYC,yBAAb,EAAwC;AACnDC,IAAAA,IAAI,EAAE;AACLC,MAAAA,KAAK,EAAE;AADF;AAD6C,GAAxC,CAAX;AAKDC,EAAAA,OAAO,CAACC,GAAR,CAAa,sBAAb;AACA,CAPM;AAQP,OAAO,MAAMC,gBAAgB,GAAG,MAAM;AACpCF,EAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACA,MAAGT,MAAH,EAAWA,MAAM,CAACW,UAAP;AACZ,CAHM;AAIP,OAAO,MAAMC,SAAS,GAAIC,EAAD,IAAQ;AAChCb,EAAAA,MAAM,CAACc,IAAP,CAAY,YAAZ,EAA0B,yBAA1B;AACC,MAAI,CAACd,MAAL,EAAa,OAAO,IAAP;AACbA,EAAAA,MAAM,CAACe,EAAP,CAAU,cAAV,EAA0BC,IAAI,IAAI;AAChCR,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACA,WAAOI,EAAE,CAAC,IAAD,EAAOG,IAAP,CAAT;AACD,GAHD;AAID,CAPM;AAQP,OAAO,MAAMC,QAAQ,GAAG,CAACf,IAAD,EAAOgB,IAAP,KAAgB;AACtC,MAAIlB,MAAJ,EAAYA,MAAM,CAACc,IAAP,CAAY,MAAZ,EAAoB;AAAEI,IAAAA,IAAF;AAAQhB,IAAAA;AAAR,GAApB;AACb,CAFM","sourcesContent":["import { io } from 'socket.io-client';\n\nlet socket;\nexport const initiateSocketConnection = (room) => {\n  socket = io(process.env.REACT_APP_SOCKET_ENDPOINT, {\n\t\tauth: {\n\t\t\ttoken: 'cde'\n\t\t},\n\t});\n\tconsole.log(`Connecting socket...`);\n}\nexport const disconnectSocket = () => {\n  console.log('Disconnecting socket...');\n  if(socket) socket.disconnect();\n}\nexport const subscribe = (cb) => {\n\tsocket.emit('my message', 'Hello there from React.');\n  if (!socket) return(true);\n  socket.on('my broadcast', draw => {\n    console.log('Websocket event received!');\n    return cb(null, draw);\n  });\n}\nexport const sendData = (room, data) => {\n  if (socket) socket.emit('chat', { data, room });\n}\n"]},"metadata":{},"sourceType":"module"}