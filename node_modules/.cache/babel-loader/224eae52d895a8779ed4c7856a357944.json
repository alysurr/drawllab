{"ast":null,"code":"import { io } from 'socket.io-client';\nlet socket;\nexport const initiateSocketConnection = room => {\n  socket = io(process.env.REACT_APP_SOCKET_ENDPOINT);\n  console.log(`Connecting socket...`);\n};\nexport const disconnectSocket = () => {\n  console.log('Disconnecting socket...');\n  if (socket) socket.disconnect();\n};\nexport const subscribe = cb => {\n  socket.emit('my drawing', 'Hello');\n  if (!socket) return true;\n  socket.on('my broadcast', draw => {\n    console.log('Websocket event received!');\n    return cb(null, draw);\n  });\n};\nexport const sendData = (room, data) => {\n  if (socket) socket.emit('chat', {\n    data,\n    room\n  });\n};","map":{"version":3,"sources":["/Users/alysurr/Documents/Capstone/drawllab/client/src/components/socketio.service.js"],"names":["io","socket","initiateSocketConnection","room","process","env","REACT_APP_SOCKET_ENDPOINT","console","log","disconnectSocket","disconnect","subscribe","cb","emit","on","draw","sendData","data"],"mappings":"AAAA,SAASA,EAAT,QAAmB,kBAAnB;AAEA,IAAIC,MAAJ;AACA,OAAO,MAAMC,wBAAwB,GAAIC,IAAD,IAAU;AAChDF,EAAAA,MAAM,GAAGD,EAAE,CAACI,OAAO,CAACC,GAAR,CAAYC,yBAAb,CAAX;AACDC,EAAAA,OAAO,CAACC,GAAR,CAAa,sBAAb;AACA,CAHM;AAIP,OAAO,MAAMC,gBAAgB,GAAG,MAAM;AACpCF,EAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACA,MAAGP,MAAH,EAAWA,MAAM,CAACS,UAAP;AACZ,CAHM;AAKP,OAAO,MAAMC,SAAS,GAAIC,EAAD,IAAQ;AAChCX,EAAAA,MAAM,CAACY,IAAP,CAAY,YAAZ,EAA0B,OAA1B;AACC,MAAI,CAACZ,MAAL,EAAa,OAAO,IAAP;AACbA,EAAAA,MAAM,CAACa,EAAP,CAAU,cAAV,EAA0BC,IAAI,IAAI;AAChCR,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACA,WAAOI,EAAE,CAAC,IAAD,EAAOG,IAAP,CAAT;AACD,GAHD;AAID,CAPM;AASP,OAAO,MAAMC,QAAQ,GAAG,CAACb,IAAD,EAAOc,IAAP,KAAgB;AACtC,MAAIhB,MAAJ,EAAYA,MAAM,CAACY,IAAP,CAAY,MAAZ,EAAoB;AAAEI,IAAAA,IAAF;AAAQd,IAAAA;AAAR,GAApB;AACb,CAFM","sourcesContent":["import { io } from 'socket.io-client';\n\nlet socket;\nexport const initiateSocketConnection = (room) => {\n  socket = io(process.env.REACT_APP_SOCKET_ENDPOINT);\n\tconsole.log(`Connecting socket...`);\n}\nexport const disconnectSocket = () => {\n  console.log('Disconnecting socket...');\n  if(socket) socket.disconnect();\n}\n\nexport const subscribe = (cb) => {\n\tsocket.emit('my drawing', 'Hello');\n  if (!socket) return(true);\n  socket.on('my broadcast', draw => {\n    console.log('Websocket event received!');\n    return cb(null, draw);\n  });\n}\n\nexport const sendData = (room, data) => {\n  if (socket) socket.emit('chat', { data, room });\n}\n"]},"metadata":{},"sourceType":"module"}